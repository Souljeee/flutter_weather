// Mocks generated by Mockito 5.2.0 from annotations
// in weather_app/test/sorting_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/data/city_list_model/weather_city_list.dart' as _i5;
import 'package:weather_app/data/current_weather_model/weather.dart' as _i10;
import 'package:weather_app/data/current_weather_model/weather_dto.dart' as _i3;
import 'package:weather_app/data/data_sources/repository_local.dart' as _i9;
import 'package:weather_app/data/data_sources/repository_remote.dart' as _i7;
import 'package:weather_app/data/data_sources/weather_storage.dart' as _i6;
import 'package:weather_app/data/future_weather_model/weather_list.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDio_0 extends _i1.Fake implements _i2.Dio {}

class _FakeWeatherDTO_1 extends _i1.Fake implements _i3.WeatherDTO {}

class _FakeWeatherList_2 extends _i1.Fake implements _i4.WeatherList {}

class _FakeWeatherCityList_3 extends _i1.Fake implements _i5.WeatherCityList {}

class _FakeWeatherStorage_4 extends _i1.Fake implements _i6.WeatherStorage {}

/// A class which mocks [WeatherRepositoryRemote].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositoryRemote extends _i1.Mock
    implements _i7.WeatherRepositoryRemote {
  MockWeatherRepositoryRemote() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_0())
          as _i2.Dio);
  @override
  set dio(_i2.Dio? _dio) => super.noSuchMethod(Invocation.setter(#dio, _dio),
      returnValueForMissingStub: null);
  @override
  _i8.Future<_i3.WeatherDTO> loadCurrentWeatherData(String? lat, String? lon) =>
      (super.noSuchMethod(
              Invocation.method(#loadCurrentWeatherData, [lat, lon]),
              returnValue: Future<_i3.WeatherDTO>.value(_FakeWeatherDTO_1()))
          as _i8.Future<_i3.WeatherDTO>);
  @override
  _i8.Future<_i4.WeatherList> loadFutureWeatherData(String? lat, String? lon) =>
      (super.noSuchMethod(Invocation.method(#loadFutureWeatherData, [lat, lon]),
              returnValue: Future<_i4.WeatherList>.value(_FakeWeatherList_2()))
          as _i8.Future<_i4.WeatherList>);
  @override
  _i8.Future<_i5.WeatherCityList> getCityList(String? name) =>
      (super.noSuchMethod(Invocation.method(#getCityList, [name]),
              returnValue:
                  Future<_i5.WeatherCityList>.value(_FakeWeatherCityList_3()))
          as _i8.Future<_i5.WeatherCityList>);
}

/// A class which mocks [WeatherLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalRepository extends _i1.Mock
    implements _i9.WeatherLocalRepository {
  MockWeatherLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WeatherStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeWeatherStorage_4()) as _i6.WeatherStorage);
  @override
  set storage(_i6.WeatherStorage? _storage) =>
      super.noSuchMethod(Invocation.setter(#storage, _storage),
          returnValueForMissingStub: null);
  @override
  void putWeather(_i10.Weather? weather) =>
      super.noSuchMethod(Invocation.method(#putWeather, [weather]),
          returnValueForMissingStub: null);
  @override
  List<_i10.Weather> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
          returnValue: <_i10.Weather>[]) as List<_i10.Weather>);
  @override
  void remove(int? index) =>
      super.noSuchMethod(Invocation.method(#remove, [index]),
          returnValueForMissingStub: null);
}
